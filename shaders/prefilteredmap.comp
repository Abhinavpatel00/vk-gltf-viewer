#version 450

layout (constant_id = 0) const uint ROUGHNESS_LEVELS = 8;
layout (constant_id = 1) const uint SAMPLES = 1024;

layout (set = 0, binding = 0) uniform samplerCube cubemapSampler;
layout (set = 0, binding = 1) writeonly uniform imageCube prefilteredmapMipImages[ROUGHNESS_LEVELS];

layout (push_constant) uniform PushConstant {
    uint mipLevel;
} pc;

layout (local_size_x = 16, local_size_y = 16) in;

// --------------------
// Functions.
// --------------------

vec3 getWorldDirection(uvec3 coord, uint imageSize){
    vec2 texcoord = 2.0 * vec2(coord.xy) / imageSize - 1.0;
    switch (coord.z){
        case 0U: return normalize(vec3(1.0, texcoord.y, -texcoord.x));
        case 1U: return normalize(vec3(-1.0, texcoord.yx));
        case 2U: return normalize(vec3(texcoord.x, -1.0, texcoord.y));
        case 3U: return normalize(vec3(texcoord.x, 1.0, -texcoord.y));
        case 4U: return normalize(vec3(texcoord, 1.0));
        case 5U: return normalize(vec3(-texcoord.x, texcoord.y, -1.0));
    }
    return vec3(0.0); // unreachable.
}

// Van Der Corpus sequence
// @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float vdcSequence(uint bits){
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// Hammersley sequence
// @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
vec2 hammersleySequence(uint i, uint N){
    return vec2(float(i) / float(N), vdcSequence(i));
}

// GGX NDF via importance sampling
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness){
    const float PI = 3.14159265359;

    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha2 - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

// Normal Distribution
float dGgx(float dotNH, float roughness){
    const float PI = 3.14159265359;

    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
    return alpha2 / (PI * denom * denom);
}

void main(){
    const float PI = 3.14159265359;

    uint prefilteredmapImageSize = imageSize(prefilteredmapMipImages[0]).x >> pc.mipLevel;
    if (gl_GlobalInvocationID.x >= prefilteredmapImageSize || gl_GlobalInvocationID.y >= prefilteredmapImageSize){
        return;
    }

    float roughness = float(pc.mipLevel) / float(ROUGHNESS_LEVELS - 1U);
    uint cubemapSize = textureSize(cubemapSampler, 0).x;
    float saTexel  = 4.0 * PI / (6 * cubemapSize * cubemapSize);

    // tagent space from origin point
    vec3 N = getWorldDirection(ivec3(gl_GlobalInvocationID), prefilteredmapImageSize);
    // assume view direction always equal to outgoing direction
    vec3 V = N;

    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for (uint i = 0; i < SAMPLES; ++i){
        // generate sample vector towards the alignment of the specular lobe
        vec2 Xi = hammersleySequence(i, SAMPLES);
        vec3 H = importanceSampleGGX(Xi, N, roughness);
        vec3 L = reflect(-V, H);

        float dotNL = dot(N, L);
        if (dotNL > 0.0){
            float dotNH = max(dot(N, H), 0.0);
            // sample from the environment's mip level based on roughness/pdf
            float D = dGgx(dotNH, roughness);
            float pdf = 0.25 * D + 0.0001;

            float saSample = 1.0 / (SAMPLES * pdf + 0.0001);
            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

            // TODO: don't know why, but use original L flips the prefilteredmap in y-axis.
            prefilteredColor += textureLod(cubemapSampler, vec3(L.x, -L.y, L.z), mipLevel).rgb * dotNL;
            totalWeight += dotNL;
        }
    }
    prefilteredColor /= totalWeight;

    imageStore(prefilteredmapMipImages[pc.mipLevel], ivec3(gl_GlobalInvocationID), vec4(prefilteredColor, 1.0));
}